----- CASE STUDIES 1 ------	

create database casestudies;

use casestudies;


--imported fact data

select * from fact;

select * from location;

select * from product;

--Tasks to be performed:

--1. Display the number of states present in the LocationTable.

select count(distinct(state)) as state from location;

--2. How many products are of regular type?

select count(product) as product from product
where Type= 'Regular';

--3. How much spending has been done on marketing of product ID 1?

select sum(marketing) as sum_of_productid1 from fact
where productid =1;

--4. What is the minimum sales of a product?
select min(sales) as minimum_sales from fact;

--5. Display the max Cost of Good Sold (COGS). 
select max(COGS) as max_COGS from fact;

--6. Display the details of the product where product type is coffee. 

select * from product
where product_type='Coffee'; 

--7. Display the details where total expenses are greater than 40. 
select * from fact
where total_expenses > 40 
order by total_expenses desc;

--8. What is the average sales in area code 719?
select Avg(sales) as avg_sales from fact
where area_code =719;

--9. Find out the total profit generated by Colorado state.
select sum(f.profit) as total_profit from fact as F
join location as l
on  f.area_code = l.area_code
where state='Colorado';

--10. Display the average inventory for each product ID. 
select productid, avg(inventory) as avg_inventory  from fact
group by productid
order by productid asc;

--11. Display state in a sequential order in a Location Table. 
select distinct(state) from location
order by state desc;

--12. Display the average budget of the Product where the average budget margin should be greater than 100. 
select productid, avg(budget_margin) as avg_budget_margin from fact
group by productid
having avg(budget_margin) > 100;

select p.product, avg(f.budget_margin) as avg_budget_margin from fact as f
inner join product as p
on f.productid = p.productid
group by p.product
having avg(f.budget_margin) > 100;

select * from product

--13. What is the total sales done on date 2010-01-01? 
select sum(sales) as total_sales from fact
where date= '2010-01-01';

--14. Display the average total expense of each product ID on an individual date. 
select date, productid, avg(total_expenses) as avg_expenses from fact
group by date, productid
order by date, productid;

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 

select f.date, f.productID, p.product_type, p.product, f.sales, f.profit, L.state, L.area_code from fact as f
inner join product as p
on f.productid = p.productid
inner join location as L
on f.area_code = L.area_code
order by f.date, f.productid asc;

select * from product;
select * from fact;
select * from location;

--16. Display the rank without any gap to show the sales wise rank. 
select sales, dense_rank()over(order by sales asc) as rank from fact;

--17. Find the state wise profit and sales. 
select L.state, sum(f.profit) as total_profit, sum(f.sales) as total_sales  from fact as F
inner join location as L
on F.area_code = L.area_code
group by L.state
order by L.state asc;

--18. Find the state wise profit and sales along with the productname.
select L.state, P.product, sum(f.profit) as total_profit, sum(f.sales) as total_sales  from fact as F
inner join location as L
on F.area_code = L.area_code
inner join product as P
on P.productid = F.productid
group by L.state,p.product
order by L.state, p.product asc;

--19. If there is an increase in sales of 5%, calculate the increased sales. 
select *, (Sales*0.05) as increased_sales from fact;

--20. Find the maximum profit along with the product ID and producttype. 
select f.productid, p.product_type, profit from fact as F
inner join product as P
on P.productid = F.productid
where profit= (select max(profit) from fact);

--21. Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure SP_Product @val varchar(30)
as 
select * from product
where product_type= @val;

exec SP_Product @val='Coffee'; 
exec SP_Product @val='Tea'; 

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select 
Case
when [Total_Expenses] < 60 then 'PROFIT'
ELSE 'LOSS'
END AS COMMENT ,[Total_Expenses]
FROM FACT ;

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order. 
SELECT [ProductId],[Date],SUM([Sales]) AS WEEKLY_SALES
FROM fact
GROUP BY ROLLUP([ProductId],[Date]);

--24. Apply union and intersection operator on the tables which consist of attribute area code. 
SELECT Area_Code FROM FACT
UNION
SELECT Area_Code FROM LOCATION
         --INTERSECT
SELECT Area_Code FROM FACT
INTERSECT
SELECT Area_Code FROM LOCATION

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 
CREATE FUNCTION getProductType (@producttype varchar(50))
returns table
as
return
(
 select * from Product
 where Product_Type = @producttype 
 );

 select * from dbo.getProductType('tea'); -- USERPREFERENCE
 select * from dbo.getProductType('cofee');-- USERPREFERENCE

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
BEGIN TRANSACTION
UPDATE Product
SET Product_Type = 'TEA'
WHERE [ProductId] = 1
--NOW IT CHANGES TO TEA
 ROLLBACK ; -- IT ROLLBACK THE PREVIOUS VALUE
 SELECT * FROM PRODUCT

--27. Display the date, product ID and sales where total expenses are between 100 to 200. 
SELECT [Date],[ProductId],[Sales] FROM FACT
WHERE SALES BETWEEN 100 AND 200
ORDER  BY [ProductId]

--28. Delete the records in the Product Table for regular type. 
DELETE FROM Product
WHERE Type = 'REGULAR';

SELECT * FROM Product

--29. Display the ASCII value of the fifth character from the columnProduct.
SELECT ASCII(SUBSTRING(Product, 5, 1)) AS ASCII_Value
FROM Product1;